{"version":3,"sources":["Icons/logo512.png","Icons/download-logo.tsx","Graphs/NotasGraph.tsx","App.tsx","Graphs/SpringElectrical.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["DownloadLogo","id","fill","enableBackground","height","viewBox","width","xmlns","d","Component","NotasGraph","props","Object","keys","Graph","NodeDictionary","map","id1","LinksTowards","id2","x1","X","toString","y1","Y","x2","y2","style","stroke","strokeWidth","cx","cy","r","App","useState","Energy","graph","setGraph","a","tempGraph","window","showDirectoryPicker","dirHandle","values","entry","console","log","name","kind","getDirectoryHandle","dirHandle2","getFileHandle","fileHandleInfo","getFile","infoFile","JSON","text","infoJson","parse","noteID","fileHandleText","file","noteText","noteName","slice","indexOf","linkIDs","match","forEach","link","newID","length","includes","push","ID","Name","Text","Math","floor","random","LinksFrom","i","useEffect","timer","setTimeout","transformedGraph","gravityCenter","A","fSquared","xi","yi","fx","fy","j","xj","yj","dij","sqrt","pow","newX","newY","ForceTransform","clearTimeout","className","onClick","src","NotasLogo","alt","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7900e42c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo512.998b52df.png\";","import React, { Component } from 'react'; // let's also import Component\n\nexport default class DownloadLogo extends Component<{}, {}> {\n\n  // render will know everything!\n  render() {\n    return <svg id=\"_x31_px\" fill=\"black\" enableBackground=\"new 0 0 24 24\" height=\"20\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m12 16c-.128 0-.256-.049-.354-.146l-5.5-5.5c-.143-.144-.186-.358-.108-.545.077-.187.26-.309.462-.309h3v-6.5c0-.551.449-1 1-1h3c.551 0 1 .449 1 1v6.5h3c.202 0 .385.122.462.309.078.187.035.402-.108.545l-5.5 5.5c-.098.097-.226.146-.354.146zm-4.293-5.5 4.293 4.293 4.293-4.293h-2.293c-.276 0-.5-.224-.5-.5v-7h-3v7c0 .276-.224.5-.5.5z\"/><path d=\"m22.5 22h-21c-.827 0-1.5-.673-1.5-1.5v-1c0-.827.673-1.5 1.5-1.5h21c.827 0 1.5.673 1.5 1.5v1c0 .827-.673 1.5-1.5 1.5zm-21-3c-.276 0-.5.224-.5.5v1c0 .276.224.5.5.5h21c.276 0 .5-.224.5-.5v-1c0-.276-.224-.5-.5-.5z\"/></svg>\n  }\n}","import React from \"react\";\nimport Graph from \"../models/graph\";\n\n//const graphData : Graph = {\n//    Energy: 10000000,\n//    NodeDictionary: {\n//        \"id1\": {\n//            ID: \"id1\",\n//            Text: \"\",\n//            X: 1101,\n//            Y: 1101,\n//            ConnectedNodes: [\"id2\"]\n//        },\n//        \"id2\": {\n//            ID: \"id2\",\n//            Text: \"\",\n//            X: 1202,\n//            Y: 1202,\n//            ConnectedNodes: [\"id3\"]\n//        },\n//        \"id3\": {\n//            ID: \"id3\",\n//            Text: \"\",\n//            X: 1003,\n//            Y: 1403,\n//            ConnectedNodes: []\n//        },\"id4\": {\n//            ID: \"id4\",\n//            Text: \"\",\n//            X: 1431,\n//            Y: 1241,\n//            ConnectedNodes: [\"id2\"]\n//        },\"id5\": {\n//            ID: \"id6\",\n//            Text: \"\",\n//            X: 1501,\n//            Y: 1701,\n//            ConnectedNodes: [\"id2\"]\n//        },\"id6\": {\n//            ID: \"id6\",\n//            Text: \"\",\n//            X: 1001,\n//            Y: 1451,\n//            ConnectedNodes: [\"id2\"]\n//        },\n//    },\n//    Links: \n//        [\n//            {  \n//                StartID: \"id1\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id2\",\n//                EndID: \"id3\"\n//            },\n//            {  \n//                StartID: \"id4\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id5\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id6\",\n//                EndID: \"id2\"\n//            }\n//        ]\n//}\n\ninterface Props {\n    Graph: Graph\n}\n\n//let timerID: any;\n\nexport default function NotasGraph(props: Props) {\n\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 15000 15000\"\n        >\n            {\n                Object.keys(props.Graph.NodeDictionary).map((id1: string) =>\n                    props.Graph.NodeDictionary[id1].LinksTowards.map((id2: string) =>\n                        <line\n                            key={id1 + id2}\n                            x1={props.Graph.NodeDictionary[id1].X.toString()} \n                            y1={props.Graph.NodeDictionary[id1].Y.toString()} \n                            x2={props.Graph.NodeDictionary[id2].X.toString()} \n                            y2={props.Graph.NodeDictionary[id2].Y.toString()} \n                            style={{stroke:\"grey\",strokeWidth:4}} \n                        />\n                    )\n                )\n            }\n            {\n                Object.keys(props.Graph.NodeDictionary).map((id: string) =>\n                    <circle \n                        key={id}\n                        cx={props.Graph.NodeDictionary[id].X.toString()} \n                        cy={props.Graph.NodeDictionary[id].Y.toString()}\n                        r=\"40\" \n                        stroke=\"lightgrey\" \n                        strokeWidth=\"4\" \n                        fill=\"grey\" \n                    />\n                )\n            }\n            {\n                    <circle \n                        key={\"center\"}\n                        cx={7500} \n                        cy={7500}\n                        r=\"20\" \n                        stroke=\"lightgrey\" \n                        strokeWidth=\"2\" \n                        fill=\"red\" \n                    />\n            }\n        </svg>\n    );\n}\n\n/*\n<line x1=\"400\" y1=\"400\" x2=\"200\" y2=\"200\" style={{stroke:\"grey\",strokeWidth:10}} />\n                <circle cx=\"400\" cy=\"400\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n                <circle cx=\"200\" cy=\"200\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n                <circle cx=\"600\" cy=\"600\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n*/","import React, {useState, useEffect} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport NotasLogo from './Icons/logo512.png';\nimport DownloadLogo from './Icons/download-logo'\nimport Graph from './models/graph';\nimport NotasGraph from './Graphs/NotasGraph'\nimport ForceTransform from './Graphs/SpringElectrical';\n\nlet graphData : Graph = {\n  Energy: 10000000,\n  NodeDictionary: {\n      \"id1\": {\n          ID: \"id1\",\n          Name: \"\",          \n          Text: \"\",\n          X: 1101,\n          Y: 1101,\n          LinksTowards: [\"id2\"],\n          LinksFrom: []\n      },\n      \"id2\": {\n          ID: \"id2\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1501,\n          Y: 1501,\n          LinksTowards: [\"id3\", \"id4\", \"id5\", \"id6\", \"id7\"],\n          LinksFrom: [\"id1\"]\n      },\n      \"id3\": {\n          ID: \"id3\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1301,\n          Y: 1301,\n          LinksTowards: [],\n          LinksFrom: [\"id2\"]\n      },\n      \"id4\": {\n          ID: \"id4\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1151,\n          Y: 1251,\n          LinksTowards: [],\n          LinksFrom: [\"id2\"]\n      },\n      \"id5\": {\n          ID: \"id5\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1161,\n          Y: 1251,\n          LinksTowards: [],\n          LinksFrom: [\"id2\"]\n      },\n      \"id6\": {\n          ID: \"id6\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1161,\n          Y: 1281,\n          LinksTowards: [],\n          LinksFrom: [\"id2\"]\n      },\n      \"id7\": {\n          ID: \"id7\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1261,\n          Y: 1251,\n          LinksTowards: [],\n          LinksFrom: [\"id2\"]\n      },\n      \"id8\": {\n          ID: \"id8\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1262,\n          Y: 1451,\n          LinksTowards: [],\n          LinksFrom: [\"id9\"]\n      },\n      \"id9\": {\n          ID: \"id9\",\n          Name: \"\",  \n          Text: \"\",\n          X: 165,\n          Y: 152,\n          LinksTowards: [\"id8\"],\n          LinksFrom: []\n      },\n      \"id10\": {\n          ID: \"id10\",\n          Name: \"\",  \n          Text: \"\",\n          X: 1266,\n          Y: 1251,\n          LinksTowards: [],\n          LinksFrom: [\"id11\"]\n      },\n      \"id11\": {\n          ID: \"id11\",\n          Name: \"\",  \n          Text: \"\",\n          X: 155,\n          Y: 132,\n          LinksTowards: [\"id10\"],\n          LinksFrom: []\n      }\n  }\n}\n\nfunction App() {\n\n  const [graph, setGraph]: [Graph, React.Dispatch<React.SetStateAction<Graph>>] = useState({Energy: 1000, NodeDictionary: {}});\n\n  // async function onClick() {\n  //   let fileHandle: FileSystemFileHandle;\n  //   [fileHandle] = await window.showOpenFilePicker();\n  //   const file: File = await fileHandle.getFile();\n  //   console.log(file);\n  //   const contents: string = await file.text();\n  //   setText(contents);\n  // }\n\n  async function onClickBearImport () {\n\n    let tempGraph = graph;\n\n    const dirHandle = await window.showDirectoryPicker();\n    for await (const entry of dirHandle.values()) {\n      console.log(entry.name);\n      if(entry.kind === \"directory\") {\n        let dirHandle2 = await dirHandle.getDirectoryHandle(entry.name);\n        let fileHandleInfo: FileSystemHandle = await dirHandle2.getFileHandle(\"info.json\");\n        let infoFile: File = await fileHandleInfo.getFile();\n\n        //1. Get information of current note\n        let infoJson: any = JSON.parse(await infoFile.text());\n        let noteID: string = infoJson[\"net.shinyfrog.bear\"][\"uniqueIdentifier\"];\n        let fileHandleText: FileSystemHandle = await dirHandle2.getFileHandle(\"text.txt\");\n        let file: File = await fileHandleText.getFile();\n        let noteText: string = await file.text();\n        let noteName = noteText.slice(2, noteText.indexOf(\"\\n\"));\n\n        //console.log(noteID);\n        //console.log(noteName);\n\n        //2. Get linked notes as list https://regexr.com\n        //let linkRegEx: string = \"/\\[.+\\]+\\([a-zA-Z\\:\\/\\-\\?]+id=+[A-Za-z0-9\\-]+\\)/g\";\n        //let linkIDRegEx: string = \"/id=.+\\)/g\";\n        //let hashTagRegEx: string = \"/\\B(\\#[a-zA-Z/_]+)(?!;)/g\";\n        let linkIDs: string[] = [];\n        noteText.match(/\\[.+\\]+\\([a-zA-Z\\:\\/\\-\\?]+id=+[A-Za-z0-9\\-]+\\)/g)?.forEach((link: string) => {\n          console.log(link);\n          link.match(/id=.+\\)/g)?.forEach((id: string) => {\n            let newID: string = id.slice(3,id.length-1);\n            if(!(linkIDs.includes(newID))){ //!!! Maybe too slow this check.\n              linkIDs.push(id.slice(3,id.length-1));\n            }\n          })\n        });\n\n        //3. Create new node with connections.\n        if(!(noteID in tempGraph.NodeDictionary)){\n          tempGraph = { \n            ...tempGraph,\n            NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [noteID]: {\n                    ID: noteID,\n                    Name: noteName,\n                    Text: noteText,\n                    X: Math.floor(Math.random() * Math.floor(3000)),\n                    Y: Math.floor(Math.random() * Math.floor(3000)),\n                    LinksTowards: linkIDs,\n                    LinksFrom: []\n                  }\n            }\n          } \n        };\n\n        //4. Construct the connected nodes if necessary.\n        for(let i: number = 0; i < linkIDs.length; i++){\n          if(linkIDs[i] in tempGraph.NodeDictionary){\n            tempGraph = {\n              ...tempGraph,\n              NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [linkIDs[i]]: {\n                  ...tempGraph.NodeDictionary[linkIDs[i]],\n                  LinksFrom: [...tempGraph.NodeDictionary[linkIDs[i]].LinksFrom, noteID]\n                }\n              }\n            };\n          }\n          else{\n            tempGraph = {\n              ...tempGraph,\n              NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [linkIDs[i]]: {\n                  ID: linkIDs[i],\n                  Name: \"\",\n                  Text: \"\",\n                  X: Math.floor(Math.random() * Math.floor(3000)),\n                  Y: Math.floor(Math.random() * Math.floor(3000)),\n                  LinksTowards: [],\n                  LinksFrom: [noteID]\n                }\n              }\n            };\n          }\n        };\n\n        //console.log(tempGraph);\n    }\n\n    setGraph(tempGraph);\n    }\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {setGraph({...ForceTransform(graph)});}, 40);\n    return () => clearTimeout(timer);\n    //setGraph(ForceTransform(graph));\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div onClick={onClickBearImport}>\n          <DownloadLogo/>\n        </div>\n        <img className=\"notas-logo\" src={NotasLogo} alt=\"\"/>\n      </div>\n      <NotasGraph Graph={graph}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//Attribute icons\n//<div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n","import Graph from \"../models/graph\";\n\nexport default function ForceTransform(graph: Graph): Graph {\n    let transformedGraph: Graph = graph;\n\n    let gravityCenter: number[] = [7500,7500];\n\n    let R: number = 80;\n    let A: number = 0.5;\n    //let G: number = 1000;\n    //let F: number = 0.01;\n    //let convergenceEnergy: number = 1000;\n\n    console.log(\"ForceTransformedBefore:\");\n    console.log(graph);\n\n    if (true){\n        //initialize step size from energy\n        let dt: number = 0.1;\n        //if (graph.Energy < 1){\n        //    dt = dt*graph.Energy;\n        //}\n\n        let fSquared: number = 0;\n\n        Object.keys(graph.NodeDictionary).forEach(function(i: string){\n            let xi: number = graph.NodeDictionary[i].X;\n            let yi: number = graph.NodeDictionary[i].Y;\n            let fx: number = 0;\n            let fy: number = 0;\n\n            //Repulsive force between all nodes\n            Object.keys(graph.NodeDictionary).forEach(function(j: string){\n                if(j !== i){\n                    let xj: number = graph.NodeDictionary[j].X;\n                    let yj: number = graph.NodeDictionary[j].Y;\n\n                    let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                    if(dij < Math.pow(10,-3)){\n                        dij = 0.5;\n                    }\n\n                    fx += -(xj-xi)*R/dij;\n                    fy += -(yj-yi)*R/dij;\n                }\n            });\n\n            //Gravity\n            //let di: number = Math.sqrt(Math.pow(xi-1500,2) + Math.pow(yi-500,2));\n            if(true){\n                fx += -(xi-gravityCenter[0]);\n                fy += -(yi-gravityCenter[1]);\n            }\n            //else{\n            //    fx += -(xi-1500)*G/Math.pow(di,2);\n            //    fy += -(yi-1000)*G/Math.pow(di,2);\n            //}\n\n            //Attractive force between linked nodes\n            graph.NodeDictionary[i].LinksTowards.forEach(function(j: string){\n                let xj: number = graph.NodeDictionary[j].X;\n                let yj: number = graph.NodeDictionary[j].Y;\n\n                //let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                fx += (xj-xi)*A;\n                fy += (yj-yi)*A;\n            });\n            graph.NodeDictionary[i].LinksFrom.forEach(function(j: string){\n                let xj: number = graph.NodeDictionary[j].X;\n                let yj: number = graph.NodeDictionary[j].Y;\n\n                //let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                fx += (xj-xi)*A;\n                fy += (yj-yi)*A;\n            });\n\n            fSquared += Math.pow(fx,2) + Math.pow(fy,2);\n\n            let newX: number = xi + dt*fx;\n            let newY: number = yi + dt*fy;\n\n\n            //Friction\n            //newX += - F * (newX - xi);\n            //newY += - F * (newY - yi);\n\n\n            transformedGraph.NodeDictionary[i].X = newX;\n            transformedGraph.NodeDictionary[i].Y = newY;\n        });\n\n        transformedGraph.Energy = fSquared;\n        //console.log(fSquared);\n    }\n\n    console.log(\"ForceTransformedAfter:\");\n    console.log(transformedGraph);\n\n    return transformedGraph;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}