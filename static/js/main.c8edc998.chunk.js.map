{"version":3,"sources":["Icons/logo512.png","Icons/download-logo.tsx","Graphs/NotasGraph.tsx","Sidebar.tsx","App.tsx","Graphs/SpringElectrical.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["DownloadLogo","id","fill","enableBackground","height","viewBox","width","xmlns","d","Component","NotasGraph","props","Object","keys","Graph","NodeDictionary","map","id1","FilterHashtag","Hashtags","includes","LinksTowards","id2","x1","X","toString","y1","Y","x2","ID","y2","style","stroke","strokeWidth","onClick","event","console","log","onClickNode","cx","cy","r","HighlightedHashtag","SelectedNode","x","y","textAlign","fontSize","Name","Sidebar","className","Node","hashtag","Text","link","href","App","useState","Energy","graph","setGraph","LinksFrom","selectedNode","selectNode","searchInput","setSearchInput","filterHashtag","setFilterHashtag","highlightedHashtag","setHighlightHashtag","a","tempGraph","window","showDirectoryPicker","dirHandle","values","entry","kind","getDirectoryHandle","name","dirHandle2","getFileHandle","fileHandleInfo","getFile","infoFile","JSON","text","infoJson","parse","noteID","fileHandleText","file","noteText","noteName","slice","indexOf","noteBase","linkRegEx","idRegEx","linkNameRegEx","hashtagRegEx","linkIDs","match","forEach","idMatch","exec","newID","linkNameMatch","newLinkName","el","push","length","hashtags","replace","Math","floor","random","i","useEffect","timer","setTimeout","transformedGraph","gravityCenter","A","fSquared","xi","yi","fx","fy","j","xj","yj","dij","sqrt","pow","newX","newY","ForceTransform","clearTimeout","onChange","e","target","value","type","placeholder","aria-label","src","NotasLogo","alt","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c8edc998.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo512.998b52df.png\";","import React, { Component } from 'react'; // let's also import Component\n\nexport default class DownloadLogo extends Component<{}, {}> {\n\n  // render will know everything!\n  render() {\n    return <svg id=\"_x31_px\" fill=\"#545454\" enableBackground=\"new 0 0 24 24\" height=\"20\" viewBox=\"0 0 24 24\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m12 16c-.128 0-.256-.049-.354-.146l-5.5-5.5c-.143-.144-.186-.358-.108-.545.077-.187.26-.309.462-.309h3v-6.5c0-.551.449-1 1-1h3c.551 0 1 .449 1 1v6.5h3c.202 0 .385.122.462.309.078.187.035.402-.108.545l-5.5 5.5c-.098.097-.226.146-.354.146zm-4.293-5.5 4.293 4.293 4.293-4.293h-2.293c-.276 0-.5-.224-.5-.5v-7h-3v7c0 .276-.224.5-.5.5z\"/><path d=\"m22.5 22h-21c-.827 0-1.5-.673-1.5-1.5v-1c0-.827.673-1.5 1.5-1.5h21c.827 0 1.5.673 1.5 1.5v1c0 .827-.673 1.5-1.5 1.5zm-21-3c-.276 0-.5.224-.5.5v1c0 .276.224.5.5.5h21c.276 0 .5-.224.5-.5v-1c0-.276-.224-.5-.5-.5z\"/></svg>\n  }\n}","import React from \"react\";\nimport BaseNode from \"../models/baseNode\";\nimport Graph from \"../models/graph\";\nimport Node from \"../models/node\";\n\n//const graphData : Graph = {\n//    Energy: 10000000,\n//    NodeDictionary: {\n//        \"id1\": {\n//            ID: \"id1\",\n//            Text: \"\",\n//            X: 1101,\n//            Y: 1101,\n//            ConnectedNodes: [\"id2\"]\n//        },\n//        \"id2\": {\n//            ID: \"id2\",\n//            Text: \"\",\n//            X: 1202,\n//            Y: 1202,\n//            ConnectedNodes: [\"id3\"]\n//        },\n//        \"id3\": {\n//            ID: \"id3\",\n//            Text: \"\",\n//            X: 1003,\n//            Y: 1403,\n//            ConnectedNodes: []\n//        },\"id4\": {\n//            ID: \"id4\",\n//            Text: \"\",\n//            X: 1431,\n//            Y: 1241,\n//            ConnectedNodes: [\"id2\"]\n//        },\"id5\": {\n//            ID: \"id6\",\n//            Text: \"\",\n//            X: 1501,\n//            Y: 1701,\n//            ConnectedNodes: [\"id2\"]\n//        },\"id6\": {\n//            ID: \"id6\",\n//            Text: \"\",\n//            X: 1001,\n//            Y: 1451,\n//            ConnectedNodes: [\"id2\"]\n//        },\n//    },\n//    Links: \n//        [\n//            {  \n//                StartID: \"id1\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id2\",\n//                EndID: \"id3\"\n//            },\n//            {  \n//                StartID: \"id4\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id5\",\n//                EndID: \"id2\"\n//            },\n//            {  \n//                StartID: \"id6\",\n//                EndID: \"id2\"\n//            }\n//        ]\n//}\n\ninterface Props {\n    Graph: Graph,\n    SelectedNode: Node, \n    HighlightedHashtag: string,\n    FilterHashtag: string,\n    onClickNode(id: string): void\n}\n\n\n//let timerID: any;\n\nexport default function NotasGraph(props: Props) {\n\n    function onClickNode(event: any, id: string) {\n        console.log(\"Test1\" + id);\n        props.onClickNode(id);\n      }\n\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 15000 15000\"\n        >\n            {\n                Object.keys(props.Graph.NodeDictionary).map((id1: string) =>\n                    (props.FilterHashtag === \"\" || props.Graph.NodeDictionary[id1].Hashtags.includes(props.FilterHashtag)) &&\n                        props.Graph.NodeDictionary[id1].LinksTowards.map((id2: BaseNode) =>\n                            <line\n                                key={id1 + id2.ID}\n                                x1={props.Graph.NodeDictionary[id1].X.toString()} \n                                y1={props.Graph.NodeDictionary[id1].Y.toString()} \n                                x2={props.Graph.NodeDictionary[id2.ID].X.toString()} \n                                y2={props.Graph.NodeDictionary[id2.ID].Y.toString()} \n                                style={{stroke:\"grey\",strokeWidth:4}} \n                            />\n                        )\n                )\n            }\n            {\n                Object.keys(props.Graph.NodeDictionary).map((id: string) =>\n                    (props.FilterHashtag === \"\" || props.Graph.NodeDictionary[id].Hashtags.includes(props.FilterHashtag)) &&\n                        <g id={id}>\n                            <circle \n                                onClick={(event:any) => onClickNode(event, id)}\n                                key={id}\n                                cx={props.Graph.NodeDictionary[id].X.toString()} \n                                cy={props.Graph.NodeDictionary[id].Y.toString()}\n                                r=\"40\" \n                                stroke={\"lightgrey\"} \n                                strokeWidth=\"4\" \n                                fill={props.Graph.NodeDictionary[id].Hashtags.includes(props.HighlightedHashtag)? (id === props.SelectedNode.ID? \"red\" : \"rgb(230,103,0)\") : (id === props.SelectedNode.ID? \"red\" : \"grey\")} \n                            />\n                            <text \n                                id={id}\n                                x={(props.Graph.NodeDictionary[id].X-40).toString()} \n                                y={(props.Graph.NodeDictionary[id].Y+60).toString()} \n                                style={{textAlign: \"center\", fontSize: \"30\"}}\n                            >\n                                {props.Graph.NodeDictionary[id].Name}\n                            </text>\n                        </g>\n                )\n            }\n            {\n                    <circle \n                        key={\"center\"}\n                        cx={7500} \n                        cy={7500}\n                        r=\"20\" \n                        stroke=\"lightgrey\" \n                        strokeWidth=\"2\" \n                        fill=\"red\" \n                    />\n            }\n        </svg>\n    );\n}\n\n/*\n<line x1=\"400\" y1=\"400\" x2=\"200\" y2=\"200\" style={{stroke:\"grey\",strokeWidth:10}} />\n                <circle cx=\"400\" cy=\"400\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n                <circle cx=\"200\" cy=\"200\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n                <circle cx=\"600\" cy=\"600\" r=\"40\" stroke=\"white\" strokeWidth=\"3\" fill=\"grey\" />\n*/","import React from 'react';\nimport Node from '../src/models/node';\nimport BaseNode from './models/baseNode';\n//import './Stylings/note.css';\nimport './Stylings/bear.css';\n\ninterface Props {\n    Node: Node\n}\n\nfunction Sidebar(props: Props) {\n\n  return (\n    <div className=\"note-main\">\n        <h1>{props.Node.Name}</h1>\n        <p>\n        {props.Node.Hashtags.map((hashtag: string) => \n            <span key={hashtag} className=\"hashtag\">{hashtag}</span>\n        )}\n        </p>\n        <br/>\n        <div>{props.Node.Text}</div>\n        {props.Node.LinksTowards.map((link: BaseNode) =>\n            <a key={link.ID} href={\"bear://x-callback-url/open-note?id=\" + link.ID}>{link.Name}</a>\n        )}\n    </div>\n  );\n};\n\nexport default Sidebar;","import React, {useState, useEffect} from 'react';\n//import logo from './logo.svg';\nimport './Stylings/App.css';\nimport './Stylings/note.css';\nimport NotasLogo from './Icons/logo512.png';\nimport DownloadLogo from './Icons/download-logo'\nimport Graph from './models/graph';\nimport Node from './models/node';\nimport NotasGraph from './Graphs/NotasGraph'\nimport ForceTransform from './Graphs/SpringElectrical';\nimport Sidebar from './Sidebar'\nimport BaseNode from './models/baseNode';\n//import '../src/Stylings/bear.css'\n\n// let graphData : Graph = {\n//   Energy: 10000000,\n//   NodeDictionary: {\n//       \"id1\": {\n//           ID: \"id1\",\n//           Name: \"\",          \n//           Text: \"\",\n//           X: 1101,\n//           Y: 1101,\n//           LinksTowards: [\"id2\"],\n//           LinksFrom: []\n//       },\n//       \"id2\": {\n//           ID: \"id2\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1501,\n//           Y: 1501,\n//           LinksTowards: [\"id3\", \"id4\", \"id5\", \"id6\", \"id7\"],\n//           LinksFrom: [\"id1\"]\n//       },\n//       \"id3\": {\n//           ID: \"id3\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1301,\n//           Y: 1301,\n//           LinksTowards: [],\n//           LinksFrom: [\"id2\"]\n//       },\n//       \"id4\": {\n//           ID: \"id4\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1151,\n//           Y: 1251,\n//           LinksTowards: [],\n//           LinksFrom: [\"id2\"]\n//       },\n//       \"id5\": {\n//           ID: \"id5\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1161,\n//           Y: 1251,\n//           LinksTowards: [],\n//           LinksFrom: [\"id2\"]\n//       },\n//       \"id6\": {\n//           ID: \"id6\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1161,\n//           Y: 1281,\n//           LinksTowards: [],\n//           LinksFrom: [\"id2\"]\n//       },\n//       \"id7\": {\n//           ID: \"id7\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1261,\n//           Y: 1251,\n//           LinksTowards: [],\n//           LinksFrom: [\"id2\"]\n//       },\n//       \"id8\": {\n//           ID: \"id8\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1262,\n//           Y: 1451,\n//           LinksTowards: [],\n//           LinksFrom: [\"id9\"]\n//       },\n//       \"id9\": {\n//           ID: \"id9\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 165,\n//           Y: 152,\n//           LinksTowards: [\"id8\"],\n//           LinksFrom: []\n//       },\n//       \"id10\": {\n//           ID: \"id10\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 1266,\n//           Y: 1251,\n//           LinksTowards: [],\n//           LinksFrom: [\"id11\"]\n//       },\n//       \"id11\": {\n//           ID: \"id11\",\n//           Name: \"\",  \n//           Text: \"\",\n//           X: 155,\n//           Y: 132,\n//           LinksTowards: [\"id10\"],\n//           LinksFrom: []\n//       }\n//   }\n// }\n\nfunction App() {\n\n  const [graph, setGraph]: [Graph, React.Dispatch<React.SetStateAction<Graph>>] = useState({Energy: 1000, NodeDictionary: {}});\n  const [selectedNode, selectNode]: [Node, React.Dispatch<React.SetStateAction<Node>>] = useState({ID: \"\", Name: \"\", Text: \"\", Hashtags: [] as string[], X: 0, Y: 0, LinksTowards: [] as BaseNode[], LinksFrom: [] as BaseNode[]});\n  const [searchInput, setSearchInput]: [string, React.Dispatch<React.SetStateAction<string>>] = useState(\"\");\n  const [filterHashtag, setFilterHashtag]: [string, React.Dispatch<React.SetStateAction<string>>] = useState(\"\");\n  const [highlightedHashtag, setHighlightHashtag]: [string, React.Dispatch<React.SetStateAction<string>>] = useState(\"\");\n  \n  // async function onClick() {\n  //   let fileHandle: FileSystemFileHandle;\n  //   [fileHandle] = await window.showOpenFilePicker();\n  //   const file: File = await fileHandle.getFile();\n  //   console.log(file);\n  //   const contents: string = await file.text();\n  //   setText(contents);\n  // }\n\n  async function onClickBearImport () {\n\n    let tempGraph = graph;\n\n    const dirHandle = await window.showDirectoryPicker();\n    for await (const entry of dirHandle.values()) {\n      //console.log(entry.name);\n      if(entry.kind === \"directory\") {\n        let dirHandle2 = await dirHandle.getDirectoryHandle(entry.name);\n        let fileHandleInfo: FileSystemHandle = await dirHandle2.getFileHandle(\"info.json\");\n        let infoFile: File = await fileHandleInfo.getFile();\n\n        //1. Get information of current note\n        let infoJson: any = JSON.parse(await infoFile.text());\n        let noteID: string = infoJson[\"net.shinyfrog.bear\"][\"uniqueIdentifier\"];\n        let fileHandleText: FileSystemHandle = await dirHandle2.getFileHandle(\"text.txt\");\n        let file: File = await fileHandleText.getFile();\n        let noteText: string = await file.text();\n        let noteName = noteText.slice(2, noteText.indexOf(\"\\n\"));\n        let noteBase: BaseNode = {ID: noteID, Name: noteName};\n\n        //console.log(noteID);\n        //console.log(noteName);\n\n        //2. Get linked notes as list https://regexr.com\n        let linkRegEx: RegExp = /\\[.+\\]+\\([a-zA-Z\\:\\/\\-\\?]+id=+[A-Za-z0-9\\-]+\\)/g;\n        let idRegEx: RegExp = /id=.+\\)/g;\n        let linkNameRegEx: RegExp = /\\[.+\\]/g;\n        let hashtagRegEx: RegExp = /\\B(\\#[a-zA-Z/_\\Ä\\ä\\Ö\\ö\\Ü\\ü]+)(?!;)/g;\n        let linkIDs: BaseNode[] = [];\n        noteText.match(linkRegEx)?.forEach((link: string) => {\n          //console.log(link);\n\n          //Get ID of link\n          let idMatch: RegExpExecArray | null = idRegEx.exec(link);\n          let newID: string | null = \"\";\n          if(idMatch !== null){\n            newID = idMatch[0];\n          }\n\n          //Get name of link\n          let linkNameMatch: RegExpExecArray | null = linkNameRegEx.exec(link);\n          let newLinkName: string | null = \"\";\n          if(linkNameMatch !== null){\n            newLinkName = linkNameMatch[0];\n          }\n\n          if(newID !== null && newID !== \"\" &&!(linkIDs.map(function(el){return el.ID}).includes(newID))){\n            linkIDs.push({ID: newID.slice(3,newID.length-1), Name: newLinkName});\n          }\n\n          // link.match(idRegEx)?.forEach((id: string) => {\n          //   let newID: string = id.slice(3,id.length-1);\n          //   if(!(linkIDs.map(function(el){return el.ID}).includes(newID))){ //!!! Maybe too slow this check.\n\n          //     linkIDs.push({ID: id.slice(3,id.length-1), Name: \"\"});\n          //   }\n          \n        });\n\n        //console.log(\"New link\");\n\n        //Get hashtags\n        let hashtags: string[] = [];\n        noteText.match(hashtagRegEx)?.forEach((hashtag: string) => {\n          console.log(hashtag);\n          hashtags.push(hashtag);\n        });\n\n        //Get plain note text\n        noteText = noteText.slice(noteText.indexOf(\"\\n\"), noteText.length);\n        noteText = noteText.replace(hashtagRegEx, '');\n        noteText = noteText.replace(linkRegEx, '');\n\n        //3. Create new node with connections. Or update existing node.\n        if(!(noteID in tempGraph.NodeDictionary)){\n          tempGraph = { \n            ...tempGraph,\n            NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [noteID]: {\n                    ID: noteID,\n                    Name: noteName,\n                    Text: noteText,\n                    Hashtags: hashtags,\n                    X: Math.floor(Math.random() * Math.floor(15000)),\n                    Y: Math.floor(Math.random() * Math.floor(15000)),\n                    LinksTowards: linkIDs,\n                    LinksFrom: []\n                  }\n            }\n          } \n        } else {\n          tempGraph = { \n            ...tempGraph,\n            NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [noteID]: {\n                    ID: noteID,\n                    Name: noteName,\n                    Text: noteText,\n                    Hashtags: [...tempGraph.NodeDictionary[noteID].Hashtags, ...hashtags],\n                    X: tempGraph.NodeDictionary[noteID].X,\n                    Y: tempGraph.NodeDictionary[noteID].Y,\n                    LinksTowards: [...tempGraph.NodeDictionary[noteID].LinksTowards, ...linkIDs],\n                    LinksFrom: tempGraph.NodeDictionary[noteID].LinksFrom\n                  }\n            }\n          } \n        }\n\n        //4. Construct the connected nodes if necessary.\n        for(let i: number = 0; i < linkIDs.length; i++){\n          if(linkIDs[i].ID in tempGraph.NodeDictionary){\n            tempGraph = {\n              ...tempGraph,\n              NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [linkIDs[i].ID]: {\n                  ...tempGraph.NodeDictionary[linkIDs[i].ID],\n                  LinksFrom: [...tempGraph.NodeDictionary[linkIDs[i].ID].LinksFrom, noteBase]\n                }\n              }\n            };\n          }\n          else{\n            tempGraph = {\n              ...tempGraph,\n              NodeDictionary: {\n                ...tempGraph.NodeDictionary,\n                [linkIDs[i].ID]: {\n                  ID: linkIDs[i].ID,\n                  Name: \"\",\n                  Text: \"\",\n                  Hashtags: [],\n                  X: Math.floor(Math.random() * Math.floor(15000)),\n                  Y: Math.floor(Math.random() * Math.floor(15000)),\n                  LinksTowards: [] as BaseNode[],\n                  LinksFrom: [noteBase]\n                }\n              }\n            };\n          }\n        };\n\n        //console.log(tempGraph);\n    }\n\n    setGraph(tempGraph);\n    }\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {setGraph({...ForceTransform(graph)});}, 40);\n    return () => clearTimeout(timer);\n    //setGraph(ForceTransform(graph));\n  });\n\n  function onClickNode(id: string) {\n    if(id in graph.NodeDictionary) {\n        console.log(id);\n        selectNode({...graph.NodeDictionary[id]});\n    }\n  }\n\n  function onSearchInputChange(e: any) {\n    setSearchInput(e.target.value);\n    setHighlightHashtag(e.target.value);\n  }\n\n  function onSearchButtonClick() {\n    setFilterHashtag(searchInput);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div className=\"download-logo-container\" onClick={onClickBearImport}>\n          <DownloadLogo/>\n        </div>\n        <div className=\"searchbar-container\">\n          <input \n            onChange={onSearchInputChange}\n            className=\"form-control searchbar\" \n            type=\"text\" \n            placeholder=\"Search\" \n            aria-label=\"Search\" \n            value={searchInput}\n          />\n          <button\n            onClick={onSearchButtonClick}\n          >\n            Submit\n          </button>\n        </div>\n        <img className=\"notas-logo\" src={NotasLogo} alt=\"\"/>\n      </div>\n      <div className=\"App-main\">\n        <div className=\"App-graph\">\n          <NotasGraph Graph={graph} FilterHashtag={filterHashtag} HighlightedHashtag={highlightedHashtag} SelectedNode={selectedNode} onClickNode={onClickNode}/>\n        </div>\n        <div className=\"App-sidebar\">\n          {<Sidebar Node={selectedNode}/>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//Attribute icons\n//<div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n","import BaseNode from \"../models/baseNode\";\nimport Graph from \"../models/graph\";\n\nexport default function ForceTransform(graph: Graph): Graph {\n    let transformedGraph: Graph = graph;\n\n    let gravityCenter: number[] = [7500,7500];\n\n    let R: number = 80;\n    let A: number = 0.5;\n    //let G: number = 1000;\n    //let F: number = 0.01;\n    //let convergenceEnergy: number = 1000;\n\n\n    if (true){\n        //initialize step size from energy\n        let dt: number = 0.1;\n        //if (graph.Energy < 1){\n        //    dt = dt*graph.Energy;\n        //}\n\n        let fSquared: number = 0;\n\n        Object.keys(graph.NodeDictionary).forEach(function(i: string){\n            let xi: number = graph.NodeDictionary[i].X;\n            let yi: number = graph.NodeDictionary[i].Y;\n            let fx: number = 0;\n            let fy: number = 0;\n\n            //Repulsive force between all nodes\n            Object.keys(graph.NodeDictionary).forEach(function(j: string){\n                if(j !== i){\n                    let xj: number = graph.NodeDictionary[j].X;\n                    let yj: number = graph.NodeDictionary[j].Y;\n\n                    let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                    if(dij < Math.pow(10,-3)){\n                        dij = 0.5;\n                    }\n\n                    fx += -(xj-xi)*R/dij;\n                    fy += -(yj-yi)*R/dij;\n                }\n            });\n\n            //Gravity\n            //let di: number = Math.sqrt(Math.pow(xi-1500,2) + Math.pow(yi-500,2));\n            if(true){\n                fx += -(xi-gravityCenter[0]);\n                fy += -(yi-gravityCenter[1]);\n            }\n            //else{\n            //    fx += -(xi-1500)*G/Math.pow(di,2);\n            //    fy += -(yi-1000)*G/Math.pow(di,2);\n            //}\n\n            //Attractive force between linked nodes\n            graph.NodeDictionary[i].LinksTowards.forEach(function(j: BaseNode){\n                let xj: number = graph.NodeDictionary[j.ID].X;\n                let yj: number = graph.NodeDictionary[j.ID].Y;\n\n                //let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                fx += (xj-xi)*A;\n                fy += (yj-yi)*A;\n            });\n            graph.NodeDictionary[i].LinksFrom.forEach(function(j: BaseNode){\n                let xj: number = graph.NodeDictionary[j.ID].X;\n                let yj: number = graph.NodeDictionary[j.ID].Y;\n\n                //let dij: number = Math.sqrt(Math.pow(xi-xj,2) + Math.pow(yi-yj,2));\n\n                fx += (xj-xi)*A;\n                fy += (yj-yi)*A;\n            });\n\n            fSquared += Math.pow(fx,2) + Math.pow(fy,2);\n\n            let newX: number = xi + dt*fx;\n            let newY: number = yi + dt*fy;\n\n\n            //Friction\n            //newX += - F * (newX - xi);\n            //newY += - F * (newY - yi);\n\n\n            transformedGraph.NodeDictionary[i].X = newX;\n            transformedGraph.NodeDictionary[i].Y = newY;\n        });\n\n        transformedGraph.Energy = fSquared;\n        //console.log(fSquared);\n    }\n\n    return transformedGraph;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}